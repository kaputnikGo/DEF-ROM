
; RESET BUTTON PUSH DEMO SOUNDS CODE
; hack for Heathkit ET-3400 Audio Setup
; using PIA addr 8000 (not 0400)
; current mpu clock speed is low, expecting ~894750 cycles per second
; TODO check all BRA, JSR, BSR, LOOP and GOTO addressing

;*************************************;
;RESET (POWER-ON) org 0001
;*************************************; 
0000 : 01         nop                 ; org: 0000 
0001 : 0F		      sei                 ; set interrupt mask (I = 1) 
0002 : 8E 00 7F   lds #$007F          ; load SP with 007Fh (0000 0000 0111 1111)
0005 : CE 80 00	  ldx #$8000          ; load X with 8000h, PIA (DAC) addr
0008 : 6F 01		  clr	$01,x           ; clear (00) in addr X + 01h (8001, PIA Data Direction Register for port A) 
000A : 6F 03		  clr	$03,x           ; clear (00) in addr X + 03h (8003, PIA DDR for port B)
000C : 86 FF		  ldaa	#$FF          ; load A with FFh (1111 1111)
000E : A7 00		  staa	$00,x         ; store A in addr X + 00h (8000, all outputs on port A, goes to DAC)
0010 : 6F 02		  clr	$02,x           ; clear (00) in addr X + 02h (8002, all inputs on port B, from sound select)
0012 : 86 37		  ldaa	#$37          ; load A with 37h (0011 0111)
0014 : A7 03		  staa	$03,x         ; store A in addr X + 03h (8003) (mask the 5 sound input pins)
0016 : 86 3C		  ldaa	#$3C          ; load A with 3Ch(0011 1100)
0018 : A7 01		  staa	$01,x         ; store A in addr X + 01h (8001)
001A : 97 05		  staa	X0005         ; store A in addr 0005
001C : 4F		      clra                ; clear A (00)
001D : 97 03		  staa	X0003         ; store A in addr 0003
001F : 97 00		  staa	X0000         ; store A in addr 0000
0021 : 97 01		  staa	X0001         ; store A in addr 0001
0023 : 97 02		  staa	X0002         ; store A in addr 0002
0025 : 97 04		  staa	X0004         ; store A in addr 0004
;*************************************;
;NMI , reset/diagnostic button on board, SW1
;*************************************;
0027 : 8E 00 7F		lds	#$007F          ; load SP with value 007Fh (0000 0000 0111 1111)
002A : CE FF FF		ldx	#$FFFF          ; load X with value FFFFh (1111 1111 1111 1111)
002D : 5F		      clrb                ; clear (00) B
;L0521: LOOP44
002E : E9 00		  adcb	$00,x         ; add B + X + 00h with Carry into B
0030 : 09		      dex                 ; decrement X
0031 : 8C 00 01		cpx	#$0001          ; compare X with value 0001h (proper org $F800 ?)
0034 : 26 F8		  bne	L0521           ; branch not equal zero to PC +- F8 (LOOP44)
0036 : E1 00		  cmpb	$00,x         ; compare B with X + 00h
0038 : 27 01		  beq	L052E           ; branch equal zero to PC +- 01 (GOTO47)
;*************************************;
003A : 86 01		  ldaa	#$01          ; load A with value 01h (0000 0001)
;*************************************;
;PARAM1
;*************************************;
003C : 16		      tab                 ; transfer A to B
003D : 48		      asla                ; shift left in A
003E : 48		      asla                ; shift left in A
003F : 48		      asla                ; shift left in A
0040 : 1B		      aba                 ; add A + B into A
0041 : CE 00 0F		ldx	#$000F          ; load X with value 000F (0000 0000 0000 1111)
0044 : DF 0B		  stx	X000B           ; store X in addr 000B ( & 000C)
0046 : CE 01 90		ldx	#$0190          ; load X with value 0190 (SAW)
0049 : 01		      nop                 ; no operation, advance PC (replacing a JSR with extended addr)
004A : 01		      nop                 ; no operation, advance PC
004B : 01		      nop                 ; no operation, advance PC
;*************************************;
;CALCOS (calculate offset) (jump to from PARAM7 in 4 separate locations)
;*************************************;
004C : DF 09		  stx	X0009           ; store X in 0009
004E : 9B 0A		  adda	X000A         ; add A with value in 000A
0050 : 97 0A		  staa	X000A         ; store A in 000A
0052 : 24 03		  bcc	L04FB           ; branch if Carry clear to PC +- 03 (GOTO46)
0054 : 7C 00 09		inc	X0009           ; increment value in 0009
;L04FB: GOTO46
0057 : DE 09		  ldx	X0009           ; load X with value in 0009
0059 : 01		      nop                 ; no operation, advance PC (replacing an RTS)
;*************************************;
005A : C6 09		  ldab	#$09          ; load B with 09h (0000 1001)
;*************************************;
;UTIL1 - (loop till ACCUM B is zero, while inc X value of VVECT)
;**************************************;
005C : 36		      psha                ; push A into stack(A into SP) 
;L02E1: LOOP28
005D : A6 00		  ldaa	$00,x         ; load A with value in X + 00h
005F : DF 09		  stx	X0009           ; store X in 0009
0061 : DE 0B		  ldx	X000B           ; load X with value in 000B
0063 : A7 00		  staa	$00,x         ; store A in X + 00h
0065 : 08		      inx                 ; increment X
0066 : DF 0B		  stx	X000B           ; store X in 000B
0068 : DE 09		  ldx	X0009           ; load X with value in 0009
006A : 08		      inx                 ; increment X
006B : 5A		      decb                ; decrement B
006C : 26 EF		  bne	L02E1           ; branch not equal zero to PC +- EFh (LOOP28)
006E : 32		      pula                ; pull into A from stack (SP into A)
006F : 01		      nop                 ; no operation, advance PC (replacing an RTS)
;*************************************;
;SYNTH1
;*************************************;
0070 : 96 17		  ldaa	X0017         ; load A with value in addr 0017
0072 : B7 80 00		staa	X8000         ; store A in addr 8000 (SOUND)
;L0044: LOOP1
0075 : 96 0F		  ldaa	X000F         ; load A with value in addr 000F
0077 : 97 18		  staa	X0018         ; store A in addr 0018
0079 : 96 10		  ldaa	X0010         ; load A with value in addr 0010
007B : 97 19		  staa	X0019         ; store A in addr 0019
;L004C: LOOP2
007D : DE 14		  ldx	X0014           ; load X with value in 0014
;L004E: LOOP3
007F : 96 18		  ldaa	X0018         ; load A with value in addr 0018
0081 : 73 8000		com	X8000           ; complement 1s in addr 8000 (change all 1 to 0 and 0 to 1)(SOUND)
;L0053: LOOP4
0084 : 09		      dex                 ; decrement X (X = X - 1)
0085 : 27 10		  beq	L0066           ; branch if zero (Z = 1) to PC + 2 + 10h (GOTO1)
0087 : 4A		      deca                ; decrement A (A = A - 1)
0088 : 26 FA		  bne	L0053           ; branch if not equal zero (Z = 0) to PC + 2 + FAh (LOOP4)
008A : 73 80 00		com	X8000           ; complements 1s in addr 8000 (SOUND)
008D : 96 19		  ldaa	X0019         ; load A with value in 0019
;L005E: LOOP5
008F : 09		      dex                 ; decrement X
0090 : 27 05		  beq	L0066           ; branch if zero to PC + 2 + 05h (GOTO1)
0092 : 4A		      deca                ; decrement A
0093 : 26 FA		  bne	L005E           ; branch if not equal zero to PC + 2 + FAh (LOOP5)
0095 : 20 E8		  bra	L004E           ; branch always to addr PC + E8h (LOOP3) 
;L0066: GOTO1
0097 : B6 04 00		ldaa	X0400         ; load A with value in addr 0400
009A : 2B 01		  bmi	L006C           ; branch if minus (N = 1) to addr PC + 2 + 01h (GOTO2)
009C : 43		      coma                ; complements 1s in A
;L006C: GOTO2
009D : 8B 00		  adda	#$00          ; add A with 00h (A = A + 00h)
009F : B7 80 00		staa	X8000         ; store A in addr 8000 (SOUND)
00A2 : 96 18		  ldaa	X0018         ; load A with value in 0018
00A4 : 9B 11		  adda	X0011         ; add A with value in addr 0011
00A6 : 97 18		  staa	X0018         ; store A in addr 0018
00A8 : 96 19		  ldaa	X0019         ; load A with value in 0019
00AA : 9B 12		  adda	X0012         ; add A with value in addr 0012
00AC : 97 19		  staa	X0019         ; store A in addr 0019
00AE : 91 13		  cmpa	X0013         ; compare A with value in addr 0013
00B0 : 26 CB	  	bne	L004C           ; branch if not equal zero to PC + 2 + CBh (LOOP2)
00B2 : 96 16		  ldaa	X0016         ; load A with value in 0016
00B4 : 27 06		  beq	L008B           ; branch if zero to PC + 2 + 06h (GOTO3)
00B6 : 9B 0F			adda	X000F         ; add A with value in addr 000F
00B8 : 97 0F		  staa	X000F         ; store A in addr 000F
00BA : 26 B9		  bne	L0044           ; branch if not equal zero to PC + 2 + B9h (LOOP1)
;L008B: GOTO3
00BC : 01		      nop                 ; no operation, advance PC (replacing an RTS)
;*************************************;
00BD : 86 02		  ldaa	#$02          ; load A with value 02h (0000 0010)
;*************************************;
;PARAM7
;*************************************;
00BF : 7F 00 04		clr	X0004           ; clear (00) addr 0004
00C2 : 97 0D		  staa	X000D         ; store A in addr 000D
00C4 : CE FD 94		ldx	#$FD94          ; load X with value FD94h (0594)(waveform?)
;L0255: LOOP25
00C7 : A6 00		  ldaa	$00,x         ; load A with value in X + 00h
00C9 : 27 2D		  beq	L0286           ; branch equal zero to PC + 2 + 2Dh (GOTO21)
00CB : 7A 00 0D		dec	X000D           ; decrement in addr 000D
00CE : 27 06		  beq	L0264           ; branch equal zero to PC + 2 + 06h (GOTO20)
00D0 : 4C		      inca                ; increment A
00D1 : BD FC F0		jsr	LFCF0           ; jump to subroutine in addr FCF0h (CALCOS)
00D4 : 20 F1		  bra	L0255           ; branch always to addr PC + F1 (LOOP25)
;L0264: GOTO20
00D6 : 08		      inx                 ; increment X
00D7 : DF 0B		  stx	X000B           ; store X in 000B
00D9 : BD FC F0		jsr	LFCF0           ; jump to subroutine in FCF0h (CALCOS)
00DC : DF 09		  stx	X0009           ; store X in 0009
00DE : DE 0B		  ldx	X000B           ; load X with value in 000B
;L026E: LOOP26
00E0 : A6 00		  ldaa	$00,x         ; load A with value in X + 00h
00E2 : 97 11		  staa	X0011         ; store A in addr 0011
00E4 : A6 01		  ldaa	$01,x         ; load A with value in X + 01h
00E6 : EE 02		  ldx	$02,x           ; load X with value in X + 02h
00E8 : DF 0F		  stx	X000F           ; store X in 000F
00EA : 8D 0E		  bsr	L0288           ; branch to subroutine to PC + 0Eh (SYNTH11)
00EC : DE 0B		  ldx	X000B           ; load X with value in 000B
00EE : 08		      inx                 ; increment X
00EF : 08		      inx                 ; increment X
00F0 : 08		      inx                 ; increment X
00F1 : 08		      inx                 ; increment X (step size x4)
00F2 : DF 0B		  stx	X000B           ; store X in addr 000B
00F4 : 9C 09		  cpx	X0009           ; compare X with value in 0009
00F6 : 26 E8		  bne	L026E           ; branch not equal zero to PC + 2 + E8 (LOOP26)
;L0286: GOTO21
00F8 : 01		      nop                 ; no operation, advance PC (replacing an RTS)
00F9 : 01		      nop                 ; no operation, advance PC (replacing an RTS)
;*************************************;
00FA : 86 01		  ldaa	#$01    ; load A with value 01h (0000 0001)
;*************************************;
;PARAM7
;*************************************;
00FC : 7F 00 04		clr	X0004           ; clear (00) addr 0004
00FF : 97 0D		  staa	X000D         ; store A in addr 000D
0101 : CE 01 99		ldx	#$0199          ; load X with value 0199h (0199)(waveform)
;L0255: LOOP25
0104 : A6 00		  ldaa	$00,x         ; load A with value in X + 00h
0106 : 27 2D		  beq	L0286           ; branch equal zero to PC + 2 + 2Dh (GOTO21)
0108 : 7A 00 0D		dec	X000D           ; decrement in addr 000D
010B : 27 06		  beq	L0264           ; branch equal zero to PC + 2 + 06h (GOTO20)
010D : 4C		      inca                ; increment A
010E : BD FC F0		jsr	LFCF0           ; jump to subroutine in addr FCF0h (CALCOS)
0111 : 20 F1		  bra	L0255           ; branch always to addr PC + F1 (LOOP25)
;L0264: GOTO20
0113 : 08		inx                       ; increment X
0114 : DF 0B		  stx	X000B           ; store X in 000B
0116 : BD FC F0		jsr	LFCF0           ; jump to subroutine in FCF0h (CALCOS)
0119 : DF 09		  stx	X0009           ; store X in 0009
011B : DE 0B		  ldx	X000B           ; load X with value in 000B
;L026E: LOOP26
011D : A6 00		  ldaa	$00,x         ; load A with value in X + 00h
011F : 97 11		  staa	X0011         ; store A in addr 0011
0121 : A6 01		  ldaa	$01,x         ; load A with value in X + 01h
0123 : EE 02		  ldx	$02,x           ; load X with value in X + 02h
0125 : DF 0F		  stx	X000F           ; store X in 000F
0127 : 8D 0E		  bsr	L0288           ; branch to subroutine to PC + 0Eh (SYNTH11)
0129 : DE 0B		  ldx	X000B           ; load X with value in 000B
012B : 08		      inx                 ; increment X
012C : 08		      inx                 ; increment X
012D : 08		      inx                 ; increment X
012E : 08		      inx                 ; increment X (step size x4)
012F : DF 0B		  stx	X000B           ; store X in addr 000B
0131 : 9C 09		  cpx	X0009           ; compare X with value in 0009
0133 : 26 E8		  bne	L026E           ; branch not equal zero to PC + 2 + E8 (LOOP26)
;L0286: GOTO21
0134 : 01		      nop                 ; no operation, advance PC (replacing an RTS)
0135 : 01		      nop                 ; no operation, advance PC (replacing an RTS)
;*************************************;
;LAST MAIN INSTRUCTION BELOW
;*************************************;
0136 : 20 D7		  bra	L0519           ; branch always to PC +- D7 (NMI)
;*************************************;
;END END END END
;*************************************;
;SYNTH11 - jump from PARAM7 in two sep locations
;*************************************;
0138 : CE 00 12		ldx	#$0012          ; load X with value 0012h (0000 0000 0001 0010)
013B : 80 02		  suba	#$02          ; subtract A with value 02h (0000 0010)
;L028D: LOOP27
013D : 23 15		  bls	L02A4           ; branch lower or same to PC +- 15h (GOTO23)
013F : 81 03		  cmpa	#$03          ; compare A with value 03h (0000 0011)
0141 : 27 09		  beq	L029C           ; branch equal zero to PC +- 09h (GOTO22)
0143 : C6 01		  ldab	#$01          ; load B with value 01h (0000 0001)
0145 : E7 00		  stab	$00,x         ; store B in addr X + 00h
0147 : 08		      inx                 ; increment X
0148 : 80 02		  suba	#$02          ; subtract A with value 02h (0000 0010)
014A : 20 F1		  bra	L028D           ; branch always to addr PC + F1h (LOOP27)
;L029C: GOTO22
014C : C6 91		  ldab	#$91          ; load B with value 91h (1001 0001)
014E : E7 00		  stab	$00,x         ; store B in X + 00h
0150 : 6F 01		  clr	$01,x           ; clear (00) X + 01h
0152 : 08		      inx                 ; increment X
0153 : 08		      inx                 ; increment X
;L02A4: GOTO23
0154 : C6 7E		  ldab	#$7E          ; load B with value 7Eh (0111 1110)
0156 : E7 00		  stab	$00,x         ; store B in X + 00h
0158 : C6 FA		  ldab	#$FA          ; load B with value FAh (1111 1010)
015A : E7 01		  stab	$01,x         ; store B in X + 01h
015C : C6 B2		  ldab	#$B2          ; load B with value B2h (1011 0010)
015E : E7 02		  stab	$02,x         ; store B in X + 02h
0160 : DE 0F		  ldx	X000F           ; load X with value in 000F
0162 : 4F		      clra                ; clear A (00)
0163 : F6 00 0E		ldab	X000E         ; load A with value in 000E
0166 : 5C		      incb                ; increment B
0167 : D7 0E		  stab	X000E         ; store B in 000E
0169 : D4 11		  andb	X0011         ; and B with value in 0011
016B : 54		      lsrb                ; logic shift right B ( 0 -> [b7...b0] -> C )
016C : 89 00		  adca	#$00          ; add A + 00h + Carry into A
016E : 54		      lsrb                ; logic shift right B
016F : 89 00		  adca	#$00          ; add A + 00h + Carry into A
0171 : 54		      lsrb                ; logic shift right B
0172 : 89 00		  adca	#$00          ; add A + 00h + Carry into A
0174 : 54		      lsrb                ; logic shift right B
0175 : 89 00		  adca	#$00          ; add A + 00h + Carry into A
0177 : 54		      lsrb                ; logic shift right B
0178 : 89 00		  adca	#$00          ; add A + 00h + Carry into A
017A : 54		      lsrb                ; logic shift right B
017B : 89 00		  adca	#$00          ; add A + 00h + Carry into A
017D : 54		      lsrb                ; logic shift right B
017E : 89 00		  adca	#$00          ; add A + 00h + Carry into A
0180 : 1B		      aba                 ; add A + B into A
0181 : 48		      asla                ; arithmetic shift left A ( C <- [b7...b0] <- 0 )
0182 : 48		      asla                ; arithmetic shift left A
0183 : 48		      asla                ; arithmetic shift left A
0184 : 48		      asla                ; arithmetic shift left A
0185 : 48		      asla                ; arithmetic shift left A
0186 : B7 80 00		staa	X8000         ; store A in 800 (SOUND)
0189 : 09		      dex                 ; decrement X
018A : 27 03		  beq	L02DF           ; branch equal zero PC +- 03h (GOTO24)
018C : 7E 00 12		jmp	L0012           ; jump to addr 0012 (START) <-- NO
;L02DF: GOTO24
018F : 39		      rts                 ; return from subroutine
;*************************************;
;WAVEFORM FDB
;*************************************;
0190 : 40	01                          ; 0100 0000 0000 0001 - SAW (called from 0034)                    
0192 : 00	10                          ; 0000 0000 0001 0000
0194 : E1 00                          ; 1110 0001 0000 0000
0196 : 80 FF                          ; 1000 0000 1111 1111
0198 : FF                             ; 1111 1111 
;*************************************; 
;FREQ waveform
;*************************************;
0199 : 0C 7F                          ; 0000 1100 0111 1111
019B : 1D 0F 
019D : FB 7F 
019F : 23 0F	
01A1 : 15 FE 
01A3 : 08 50
01A5 : 8A 88
01A7 : 3E	3F
;*************************************; 
;END OF COMPLETE PROGRAM
;*************************************;
